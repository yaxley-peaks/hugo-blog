#+title: Clojure doesn't come with a clojure.http
#+summary: A rant about making HTTP requests in clojure (and an appreciation of how it is done in racket)
#+slug: cljhttp
#+author: yaxley peaks
#+date: 2024-01-04
#+tags: post

** Making a simple Http get request in clojure is way too verbose.
Below is an example:

#+begin_src clojure :exports both
(defn make-get-request
  [url]
  (let [connection (.openConnection (java.net.URL. url))]
    (.setRequestMethod connection "GET")
    (let [response-code (.getResponseCode connection)]
      (if (= response-code java.net.HttpURLConnection/HTTP_OK)
        (let [input-stream (.getInputStream connection)
              reader (java.io.BufferedReader.
                      (java.io.InputStreamReader. input-stream))
              response (.readLine reader)]
          (println "Response: " response)
          response)
        (println "Request Failed with code: " response-code)))))
(make-get-request "https://hit-me.yaxley.in/")

#+end_src

#+RESULTS:
: {"response":"ouch!"}



I guess this is why it is one the [[https://survey.stackoverflow.co/2023/#section-top-paying-technologies-top-paying-technologies][higher paying languages out there]].

I understand that clojure is a language hosted on the JVM but that does not mean that it can't have it's own idiomatic standard library. If there can be a =clojure.math= then there can also be a =clojure.http=

This is how it is done in racket btw:

#+begin_src racket :exports both
#lang racket

(require net/url)

(define (make-get-request url)
  (let ([response (get-pure-port (string->url url))])
        (port->string response)))
(make-get-request "https://hit-me.yaxley.in/")
#+end_src

#+RESULTS:
: {"response":"ouch!"}


This is how *ALL* languages should do it (imo).
